import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,f as a,o as n}from"./app-DUJe-SNa.js";const l={};function t(h,s){return n(),e("div",null,[...s[0]||(s[0]=[a(`<h2 id="ssh密钥登录-暂时只记录登录gitee的部分" tabindex="-1"><a class="header-anchor" href="#ssh密钥登录-暂时只记录登录gitee的部分"><span>ssh密钥登录（暂时只记录登录gitee的部分）</span></a></h2><ol><li>安装和启动openSSH： <ul><li>window平台下，打开设置，应用-&gt;应用和功能-&gt;可选功能，查找openSSH客户端，勾选安装。之后在cmd窗口中输入where ssh，如果出现ssh路径则安装成功。</li><li>linxu平台下，直接用命令行下载openssh即可，如sudo apt install openssh-server</li></ul></li><li>关于密钥 <ul><li>密钥（key）是一个非常大的数字，通过加密算法得到。对称加密只需要一个密钥，非对称加密需要两个密钥成对使用，分为公钥（public key）和私钥（private key）。SSH 密钥登录采用的是非对称加密，每个用户通过自己的密钥登录。其中，私钥必须私密保存，不能泄漏；公钥则是公开的，可以对外发送。它们的关系是，公钥和私钥是一一对应的，每一个私钥都有且仅有一个对应的公钥，反之亦然。如果数据使用公钥加密，那么只有使用对应的私钥才能解密，其他密钥都不行；反过来，如果使用私钥加密（这个过程一般称为“签名”），也只有使用对应的公钥解密。</li><li>密钥登录过程：客户端通过ssh-keygen生成自己的公钥和私钥，第一步手动将公钥放入远程服务器的指定位置；第二步，客户端向服务器发起ssh登录请求；第三步，服务器收到请求后随机发送以下数据给用户使之提供自己的身份；第四步，客户端收到服务器发来来的数据后用私钥进行签名，再发送给服务器；第五步，服务器收到加密的签名后，使用对应的公钥解密，然后对比原始数据，如果一致，则允许登录。</li></ul></li><li>ssh登录：</li></ol><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//a. 生成密钥，windows一般在c盘用户目录下.ssh文件夹内</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ssh-keygen -t ed</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25519</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -C </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;备注（一般是邮箱）&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//密码可以空着，一路回车</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//b. pub格式的文件是公钥，另外一个是私钥</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//c. 打开公钥，复制里面的内容到服务器指定位置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//d. 在cmd里输入：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ssh -T git@gitee.com</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// git@gitee.com需要替换成服务器，这条命令会向服务器发起请求，确认是否链接成功，如果链接成功，会出现successful</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>ssh配置文件 在<code>.ssh</code>文件夹新增<code>config</code>文件，按照如下格式填写内容，可在终端直接输入shh 别名快速连接登录</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Host yourname：这是一个连接的别名。</span></span>
<span class="line"><span>  HostName：服务器地址。</span></span>
<span class="line"><span>  Port：服务器的端口号。</span></span>
<span class="line"><span>  User：登录用户名。</span></span>
<span class="line"><span>  IdentityFile：私钥的本地路径，指向刚才生成的 id_rsa 文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般使用<code>git</code>时，<code>git</code>会自动新增该配置</p><h2 id="相关命令和说明" tabindex="-1"><a class="header-anchor" href="#相关命令和说明"><span>相关命令和说明</span></a></h2><ol><li>ssh-keygen</li></ol><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-t ----&gt;用来指定密钥的加密算法，一般是RSA算法或者ED</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25519</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">算法，建议使用后者，更安全。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-b ----&gt;指定密钥的二进制位数。这个参数值越大，密钥就越不容易破解，但是加密解密的计算开销也会加大。一般来说，-b至少应该是</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，更安全一些可以设为</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2048</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">或者更高。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-C ----&gt;可以为密钥文件指定新的注释，格式为username@host</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-f ----&gt;指定生成私钥文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-p ----&gt;用于重新指定私钥的密码（passphrase）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-R ----&gt;将指定的主机公钥指纹移出known_hosts文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//举例：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ssh-keygen -t rsa -b </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4096</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -C </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;your_email@domain.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -f mykey</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//表示生成以rsa算法加密且位数为4096备注为your_email@domain.com的私钥mykey和公钥mykey.pub文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>ssh-agent（暂定）</li><li>ssh-add（暂定）</li></ol><h2 id="相关问题记录" tabindex="-1"><a class="header-anchor" href="#相关问题记录"><span>相关问题记录</span></a></h2><h3 id="ssh远程连接超时问题" tabindex="-1"><a class="header-anchor" href="#ssh远程连接超时问题"><span>SSH远程连接超时问题</span></a></h3><ul><li>这个很烦人，简而言之，根本问题在于TCP连接超时，而服务器防火墙为了安全在tcp超时时会主动关闭ssh连接</li><li>ssh保持会话需要注意的三个系统参数：</li><li>tcp_keepalive_time: 设置TCP连接的空闲时间，超过这个时间就会发送一个探测包，以判断连接是否仍然可用，使用<code>cat /proc/sys/net/ipv4/tcp_keepalive_time</code>查看</li><li>tcp_keepalive_probes：TCP keepalive探针，有tcp发送的数据包，使用 <code>cat /proc/sys/net/ipv4/tcp_keepalive_probes</code>查看</li><li>tcp_keepalive_intvl：控制发送空闲tcp连接的keepalive探针的时间间隔，使用<code>cat /proc/sys/net/ipv4/tcp_keepalive_intvl</code>查看</li><li>解决方法： <ul><li>服务端：编辑<code>/etc/ssh/sshd_config</code>文件，将<code>ClientAliveInterval</code>和<code>ClientAliveCountMax</code>两项的值设置为<code>0</code>，同时将<code>TCPKeepAlive</code>字段设置为<code>yes</code>，重启ssh服务<code>sudo systemctl restart sshd </code></li><li>客户端：设置KeepAlive选项再登录，不同ssh客户端设置方式不同，例如openSSH：<code>ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 user@host</code></li></ul></li></ul>`,13)])])}const c=i(l,[["render",t]]),r=JSON.parse('{"path":"/notes/frontnotes/frontbase/SSH%E7%AC%94%E8%AE%B0.html","title":"SSH登录以及相关命令","lang":"zh-CN","frontmatter":{"title":"SSH登录以及相关命令","date":"2023-05-10T00:00:00.000Z","tag":"前端笔记","headerDepth":2,"description":"SSH远程登录流程和常用命令总汇","article":false,"toc":{"levels":[2,4]},"feed":false,"seo":false,"head":[]},"git":{"createdTime":1694521883000,"updatedTime":1728309107000,"contributors":[{"name":"bestoAloe","username":"","email":"286258752@qq.com","commits":21},{"name":"bestoaloe","username":"","email":"yinchuanyjw@outlook.com","commits":6}]},"readingTime":{"minutes":4.06,"words":1217},"filePathRelative":"notes/frontnotes/frontbase/SSH笔记.md"}');export{c as comp,r as data};
