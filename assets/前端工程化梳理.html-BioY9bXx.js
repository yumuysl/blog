import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,f as s,o as t}from"./app-BSNJzrd9.js";const n={};function a(c,o){return t(),i("div",null,[...o[0]||(o[0]=[s('<h2 id="总览" tabindex="-1"><a class="header-anchor" href="#总览"><span>总览</span></a></h2><h3 id="代码规范体系" tabindex="-1"><a class="header-anchor" href="#代码规范体系"><span><strong>代码规范体系</strong></span></a></h3><ol><li><strong>Linter</strong>：<code>ESLint</code> + <code>Prettier</code> 保证代码风格统一（可配置 Airbnb/Standard 等流行规范）。</li><li><strong>Git 提交规范</strong>：<code>commitlint</code> + <code>Husky</code> 约束提交信息格式（如 Angular Commit Message 规范）。</li><li><strong>类型检查</strong>：<code>TypeScript</code> 静态类型系统提升代码健壮性。</li></ol><h3 id="模块化与架构" tabindex="-1"><a class="header-anchor" href="#模块化与架构"><span><strong>模块化与架构</strong></span></a></h3><ol><li><strong>组件化开发</strong>：使用 <code>Storybook</code> 搭建 UI 组件库，实现文档与开发同步。</li><li><strong>状态管理</strong>：复杂场景引入 <code>Redux</code>/<code>MobX</code>/<code>Zustand</code> 管理全局状态。</li><li><strong>路由管理</strong>：<code>React Router</code> 实现 SPA 路由控制，结合懒加载优化性能。</li></ol><h3 id="自动化测试" tabindex="-1"><a class="header-anchor" href="#自动化测试"><span><strong>自动化测试</strong></span></a></h3><ol><li><strong>单元测试</strong>：<code>Jest</code> + <code>React Testing Library</code> 测试组件逻辑。</li><li><strong>E2E 测试</strong>：<code>Cypress</code>/<code>Playwright</code> 模拟用户行为测试核心流程。</li><li><strong>覆盖率报告</strong>：<code>Istanbul</code> 生成测试覆盖率报告，保障代码质量。</li></ol><h2 id="构建与部署优化" tabindex="-1"><a class="header-anchor" href="#构建与部署优化"><span><strong>构建与部署优化</strong></span></a></h2><ol><li><strong>打包优化</strong>：Vite 内置 Rollup 配置拆分 <code>chunk</code>，结合 <code>Tree Shaking</code> 剔除无用代码。</li><li><strong>CDN 加速</strong>：静态资源上传至 CDN，使用 <code>hash</code> 文件名强缓存。</li><li><strong>CI/CD 流水线</strong>：<code>GitHub Actions</code>/<code>Jenkins</code> 实现自动化构建、测试、部署。</li></ol><h3 id="监控与性能" tabindex="-1"><a class="header-anchor" href="#监控与性能"><span><strong>监控与性能</strong></span></a></h3><ol><li><strong>性能分析</strong>：<code>Lighthouse</code>/<code>Web Vitals</code> 监控首屏加载、交互延迟等指标。</li><li><strong>错误追踪</strong>：集成 <code>Sentry</code> 实时捕获生产环境异常。</li><li><strong>日志管理</strong>：前端日志上报至 ELK（Elasticsearch+Logstash+Kibana）分析。</li></ol><h3 id="辅助工具链" tabindex="-1"><a class="header-anchor" href="#辅助工具链"><span><strong>辅助工具链</strong></span></a></h3><ol><li><strong>Mock 数据</strong>：<code>Mock.js</code> 或 <code>MSW</code> 拦截 API 请求，实现前后端并行开发。</li><li><strong>文档生成</strong>：<code>Docusaurus</code>/<code>VitePress</code> 自动生成项目文档。</li><li><strong>依赖管理</strong>：使用 <code>pnpm</code> 替代 npm/yarn，利用硬链接节省磁盘空间。</li></ol><p>🔍 <strong>扩展建议</strong>：</p><ul><li>微前端架构（qiankun/Module Federation）适用于大型项目拆分。</li><li>使用 <code>TurboRepo</code> 管理多包仓库，解决 Monorepo 协作问题。</li><li>容器化部署（Docker + K8s）提升运维效率。</li></ul><h2 id="实践笔记" tabindex="-1"><a class="header-anchor" href="#实践笔记"><span>实践笔记</span></a></h2><h3 id="git提交规范" tabindex="-1"><a class="header-anchor" href="#git提交规范"><span>Git提交规范</span></a></h3><h4 id="commitlint-cli使用" tabindex="-1"><a class="header-anchor" href="#commitlint-cli使用"><span><code>commitlint/cli</code>使用</span></a></h4><ol><li>作用：可以给git commit message进行格式化操作，强制约束提交信息符合规范，这样可以避免杂乱的手写提交信息，提升可读性，也便于版本管理</li><li>步骤： <ul><li>安装<code>pnpm add @commitlint/cli @commitlint/config-conventional -D</code></li><li><code>.commitlintrc.js</code>配置：添加<code>module.exports = { extends: [&#39;@commitlint/config-conventional&#39;] }</code></li></ul></li></ol><h4 id="husky使用" tabindex="-1"><a class="header-anchor" href="#husky使用"><span>Husky使用</span></a></h4><ol><li>作用：在git提交时hook阶段处理一些事情，比如代码格式化、类型检查、自动测试等</li><li>步骤： <ul><li>安装：<code>pnpm add husky -D</code></li><li><code>package.json</code> 配置 husky：<code>scripts</code>属性内添加<code>&quot;prepare&quot;: &quot;husky install&quot;</code></li><li>建钩子文件 <code>.husky/commit-msg</code><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/sh . &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot; npx --no -- commitlint --edit $1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ol>',21)])])}const d=e(n,[["render",a]]),h=JSON.parse('{"path":"/notes/frontnotes/frontsum/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E6%A2%B3%E7%90%86.html","title":"前端工程化梳理","lang":"zh-CN","frontmatter":{"title":"前端工程化梳理","date":"2025-03-20T00:00:00.000Z","tag":"前端笔记","description":"本文梳理了前端工程化相关知识点，总结前端体系","article":false,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1756821233000,"updatedTime":1756821233000,"contributors":[{"name":"yumuysl","username":"","email":"yinchuanyjw@outlook.com","commits":1}]},"readingTime":{"minutes":2.19,"words":658},"filePathRelative":"notes/frontnotes/frontsum/前端工程化梳理.md"}');export{d as comp,h as data};
