import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as e,o as l}from"./app-2cjhSLcQ.js";const a={};function t(o,s){return l(),n("div",null,[...s[0]||(s[0]=[e(`<h3 id="卸载干净之前的node-js" tabindex="-1"><a class="header-anchor" href="#卸载干净之前的node-js"><span>卸载干净之前的node.js</span></a></h3><ol><li>卸载之前的node.js软件后检查环境变量是否存在，如果存在删掉；</li><li>检查c盘Program Files和Program Files（x86）文件夹下是否有node.js文件夹以及node_modules文件夹，如果存在也删；</li><li>重点：最好删干净，避免后面出各种问题反工。</li></ol><h3 id="安装nvm" tabindex="-1"><a class="header-anchor" href="#安装nvm"><span>安装nvm</span></a></h3><h4 id="win11" tabindex="-1"><a class="header-anchor" href="#win11"><span>win11</span></a></h4><ol><li>去官网下载 <em><strong>setup版</strong></em>。官网：https://github.com/coreybutler/nvm-windows/releases</li><li>安装。其中，第一个路径是nvm的安装路径，第二个路径是Node.js的路径（之后会被自动做成快捷方式，所以一定！！！！是空的文件夹）；</li><li>查看是否安装成功，cmd窗口下运行 <em><strong>nvm -v</strong></em>。</li><li>配置nvm镜像（因为国外下载速度太慢，换国内的源）。找到nvm的安装文件夹，找到 <em><strong>settings.txt</strong></em> 文件打开，最后面加淘宝镜像源（可以是国内其他的）： node_mirror: https://npm.taobao.org/mirrors/node/ npm_mirror: https://npm.taobao.org/mirrors/npm/</li></ol><h4 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>linux</span></a></h4><ul><li>查看官方指南：<code>https://github.com/nvm-sh/nvm</code></li><li>安装了git，可以使用git安装nvm： <ul><li><code>cd ~</code></li><li><code>git clone https://github.com/nvm-sh/nvm.git .nvm</code></li><li><code>cd ~/.nvm</code> ， <code>git checkout v0.40.3</code></li><li><code>. ./nvm.sh</code></li><li>打开<code>~/.bashrc</code>, <code>~/.profile</code>, 或<code>~/.zshrc</code></li><li>尾部添加下面的代码</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> NVM_DIR</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/.nvm&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[ </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$NVM_DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/nvm.sh&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ] &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\\.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$NVM_DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/nvm.sh&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # This loads nvm</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[ </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$NVM_DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/bash_completion&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ] &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\\.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$NVM_DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/bash_completion&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # This loads nvm bash_completion</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>换源：在<code>~/.bashrc</code>, <code>~/.profile</code>, 或<code>~/.zshrc</code>文件尾部，新增：<code>export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node/</code></li><li><code>source ~/.bashrc</code> 或 <code>source ~/.zshrc</code>，使配置文件生效</li></ul></li></ul><h3 id="安装node-js" tabindex="-1"><a class="header-anchor" href="#安装node-js"><span>安装Node.js</span></a></h3><ol><li>如果以上两大步ok，接着查看Node.js版本（Node.js版本比较杂，主要分LTS和Current版），运行 <em><strong>nvm list available</strong></em> 或 <em><strong>nvm ls-remote</strong></em> 命令;</li><li>选好目标版本后，运行 <em><strong>nvm install 版本号</strong></em> 进行安装。</li><li>安装好后，这个时候运行node -v发现是无效的，原因是还没有使用这个版本（使用的是之前的版本或没有版本使用）。运行 <em><strong>nvm use 版本号</strong></em> 命令进行使用;</li><li>运行 <em><strong>nvm list</strong></em> 查看已经下载的Node.js版本，目前使用的版本号前会有“ * ” 号。</li><li>查看。分别运行 <em><strong>node -v和npm -v</strong></em> 查看，如果出现版本号表示安装成功。</li><li>同nvm类似，换npm的镜像源。<em><strong>npm config get registry</strong></em> 查看registry，然后运行 <em><strong>npm config set registry http://registry.npm.taobao.org</strong></em> 用set换为阿里镜像。</li><li>【选】下载pnpm包管理工具（同npm一样但好处多多，具体此处省略）。 <em><strong>npm install pnpm -g</strong></em>,可以结合附3中pnpm命令操作，建议更改pnpm全局安装路径。</li></ol><h3 id="安装好nvm后切换node版本全局依赖库管理" tabindex="-1"><a class="header-anchor" href="#安装好nvm后切换node版本全局依赖库管理"><span>安装好<code>nvm</code>后切换<code>node版本</code>全局依赖库管理</span></a></h3><ul><li>当切换node版本后使用<code>npm list -g</code>看不到之前安装的全局库，可以通过如下方式通一处理：</li></ul><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-md"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">1.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 找到一个地方，新建node_cache和node_global文件夹</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">2.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 运行命令：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   npm config set prefix &quot;你的路径/node_global&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   npm config set cache &quot;你的路径/node_cache&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">3.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 运行命令查看：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    npm config get prefix</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    npm config get cache</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">4.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> （linux可忽略）win + s，搜索环境变量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">5.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> （Linux可忽略）在用户环境和系统系统环境下的path路径添加node_global的路径</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   （win11忽略）linux中在~/.bashrc文件中尾部新增：export PATH=&quot;/path/to/your/npm/global/bin:$PATH&quot;，bin之前的路径为node_global的路径，之后执行source ~/.bashrc</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">6.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 重启终端，下载之前的依赖库查看，如: </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   npm install pnpm -g</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   npm list -g</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">7.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 切换Node版本后，运行上述步骤2的命令，修改当前版本的node对全局依赖库的管理路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="附1-nvm常用命令" tabindex="-1"><a class="header-anchor" href="#附1-nvm常用命令"><span>附1：nvm常用命令</span></a></h3><ol><li><em><strong>nvm list / nvm ls</strong></em> ---查看已经安装的node版本；</li><li><em><strong>nvm list available / nvm ls-remote</strong></em> ---查看网络可以安装的node版本；</li><li><em><strong>nvm use 版本号</strong></em> ---切换使用指定的版本node；</li><li><em><strong>nvm current</strong></em> ---显示当前版本；</li><li><em><strong>nvm install / uninstall 版本号</strong></em> ---下载或卸载目标版本的node；</li><li><em><strong>nvm on / off</strong></em> ---打开或关闭nvm</li><li><em><strong>nvm proxy</strong></em> ---查看设置与代理</li></ol><h3 id="附2-npm常用命令" tabindex="-1"><a class="header-anchor" href="#附2-npm常用命令"><span>附2：npm常用命令</span></a></h3><ol><li><em><strong>npm -v</strong></em> ---查看npm版本</li><li><em><strong>npm list</strong></em> ---查看模块</li><li><em><strong>npm install/uninstall</strong></em> ---安装/卸载模块</li><li><em><strong>npm update</strong></em> ---更新模块</li><li><em><strong>npm search 模块名称 [-g]</strong></em> ---搜索模块</li><li><em><strong>npm start/stop/restart</strong></em> ---启动/停止/重启模块</li><li><em><strong>npm -l</strong></em> ---查看各个命令的简单用法</li><li><em><strong>npm help</strong></em> ---查看npm命令列表</li><li><em><strong>npm root [-g]</strong></em> ---查看包的（全局）安装路径</li><li><em><strong>npm config</strong></em> ---管理npm的配置路径</li><li><em><strong>npm config list -l</strong></em> ---查看npm配置</li><li><em><strong>npm cache</strong></em> --管理模块的缓存</li><li><em><strong>npm init</strong></em> ---初始化项目（生成package.json文件）</li><li><em><strong>npm set</strong></em> ---设置环境变量（设置后执行npm init后才真正修改成功）</li><li><em><strong>npm run</strong></em> ---执行脚本</li><li><em><strong>npm publish</strong></em> ---发布模块</li></ol><h3 id="附3-pnpm常用命令" tabindex="-1"><a class="header-anchor" href="#附3-pnpm常用命令"><span>附3：pnpm常用命令</span></a></h3><ol><li><em><strong>pnpm add/remove [-g] 模块名</strong></em> ---（全局）安装卸载</li><li><em><strong>pnpm install/uninstall</strong></em> ---根据package.json安装依赖</li><li><em><strong>pnpm list [-g]</strong></em> 列出已经下载的（全局）依赖</li><li><em><strong>pnpm info tailwindcss</strong></em> ---查看包信息</li><li><em><strong>pnpm update [模块名称]/--latest</strong></em> ---更新所有模块或指定指定模块</li><li><em><strong>pnpm config list</strong></em> ---查看pnpm配置</li><li><em><strong>pnpm dev</strong></em> ---运行项目脚本</li><li>设置pnpm全局安装路径步骤（注意文件夹路径，linux和win11都需要按照如下设置）： <ul><li>第一步：配置pnpm全局仓库路径，运行 <em><strong>pnpm config set store-dir 你的路径</strong></em>（如 F:.pnpm-store，注意有个 “.”）</li><li>第二步：配置pnpm全局bin文件安装路径，运行 <em><strong>pnpm config set global-bin-dir 你的路径</strong></em> (如 F:\\pnpm）</li><li>第三步：配置pnpm全局安装路径，运行 <em><strong>pnpm config set global-dir 你的路径</strong></em> （如F:\\pnpm\\pnpm-global）</li><li>第四步：配置pnpm cache路径，运行 <em><strong>pnpm config set cache-dir 你的路径</strong></em> （如F:\\pnpm\\cache）</li><li>第五步：配置pnpm state路径，运行 <em><strong>pnpm config set state-dir 你的路径</strong></em>（如F:\\pnpm\\state）</li><li>第六步：配置环境变量。打开环境变量界面，<em><strong>用户变量-&gt;新建-&gt;变量名是PNPM_HOME，变量值是第二步中bin文件夹的路径（如 F:\\pnpm）-&gt;确定</strong></em>； <em><strong>系统变量-&gt;Path-&gt;编辑-&gt;新建后输入%PNPM_HOME%-&gt;确定</strong></em>。</li><li>第七步：检查。 <em><strong>分别输入pnpm config get (store-dir / global-bin-dir / global-dir / cache-dir / state-dir)</strong></em></li></ul></li><li><em><strong>pnpm outdated</strong></em> ---检测依赖最新版本</li></ol>`,18)])])}const p=i(a,[["render",t]]),h=JSON.parse('{"path":"/notes/frontnotes/frontbase/js%EF%BC%9A%E5%85%B3%E4%BA%8Envm%E5%92%8Cnode%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html","title":"js系列：关于nvm和node.js下载及环境配置","lang":"zh-CN","frontmatter":{"title":"js系列：关于nvm和node.js下载及环境配置","tag":"前端笔记","date":"2023-05-10T00:00:00.000Z","headerDepth":2,"description":"node.js的下载踩坑记录和常用命令总汇","article":false,"toc":{"levels":[2,4]},"feed":false,"seo":false,"head":[]},"git":{"createdTime":1694521883000,"updatedTime":1756821233000,"contributors":[{"name":"bestoAloe","username":"","email":"286258752@qq.com","commits":21},{"name":"bestoaloe","username":"","email":"yinchuanyjw@outlook.com","commits":6},{"name":"yumuysl","username":"","email":"yinchuanyjw@outlook.com","commits":1}]},"readingTime":{"minutes":5.12,"words":1535},"filePathRelative":"notes/frontnotes/frontbase/js：关于nvm和node的环境搭建.md"}');export{p as comp,h as data};
