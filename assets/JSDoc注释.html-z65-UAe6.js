import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,f as e,o as a}from"./app-CbockRPF.js";const l={};function n(d,t){return a(),i("div",null,[...t[0]||(t[0]=[e(`<h1 id="jsdoc-注释详解" tabindex="-1"><a class="header-anchor" href="#jsdoc-注释详解"><span>JSDoc 注释详解</span></a></h1><p>JSDoc 是一种用于 JavaScript 的 API 文档生成器，它允许你通过特定的注释格式来记录代码，并能够根据这些注释自动生成详细的 API 文档，类似于 Java 中的 JavaDoc 或 PHP 中的 phpDocumentor。这能显著提高代码的可读性、可维护性，并方便团队协作。</p><h2 id="jsdoc-注释基本格式" tabindex="-1"><a class="header-anchor" href="#jsdoc-注释基本格式"><span>JSDoc 注释基本格式</span></a></h2><p>JSDoc 注释以 <code>/**</code> 开始，以 <code>*/</code> 结束。只有这种格式的注释才会被 JSDoc 解析器识别。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">* 这是一个简单的 JSDoc 注释示例。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">* </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">param</span><span style="--shiki-light:#C18401;--shiki-light-font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;"> {string}</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> - 用户名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">* </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">returns</span><span style="--shiki-light:#C18401;--shiki-light-font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;"> {string}</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 生成的问候语</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">$</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用-jsdoc-标签" tabindex="-1"><a class="header-anchor" href="#常用-jsdoc-标签"><span>常用 JSDoc 标签</span></a></h2><p>JSDoc 提供了丰富的标签来描述代码的不同方面，下表列出了一些最常用的标签及其用途和示例：</p><table><thead><tr><th style="text-align:left;">标签 (Tag)</th><th style="text-align:left;">描述与用途</th><th style="text-align:left;">使用示例</th></tr></thead><tbody><tr><td style="text-align:left;"><strong><code>@param</code></strong></td><td style="text-align:left;">描述函数的参数。</td><td style="text-align:left;"><code>@param {string} id - 用户的唯一标识符</code></td></tr><tr><td style="text-align:left;"><strong><code>@returns</code></strong></td><td style="text-align:left;">描述函数的返回值。</td><td style="text-align:left;"><code>@returns {boolean} 操作是否成功</code></td></tr><tr><td style="text-align:left;"><strong><code>@typedef</code></strong></td><td style="text-align:left;">定义自定义类型，常用于描述复杂对象。</td><td style="text-align:left;"><code>@typedef {Object} User</code> <br> <code>@property {string} name</code> <br> <code>@property {number} age</code></td></tr><tr><td style="text-align:left;"><strong><code>@property</code></strong></td><td style="text-align:left;">与 <code>@typedef</code> 联用，定义对象类型的属性。</td><td style="text-align:left;"><code>@property {string} title - 书名</code></td></tr><tr><td style="text-align:left;"><strong><code>@type</code></strong></td><td style="text-align:left;">描述变量、属性的类型。</td><td style="text-align:left;"><code>@type {number}</code></td></tr><tr><td style="text-align:left;"><strong><code>@example</code></strong></td><td style="text-align:left;">提供代码的使用示例。</td><td style="text-align:left;"><code>@example</code> <br> <code>// 返回 3</code> <br> <code>add(1, 2);</code></td></tr><tr><td style="text-align:left;"><strong><code>@description</code></strong></td><td style="text-align:left;">提供详细的描述信息。</td><td style="text-align:left;"><code>@description 这个函数用于计算两个数的和。</code></td></tr><tr><td style="text-align:left;"><strong><code>@class</code></strong></td><td style="text-align:left;">标记一个函数是类的构造函数。</td><td style="text-align:left;"><code>@class</code></td></tr><tr><td style="text-align:left;"><strong><code>@constructor</code></strong></td><td style="text-align:left;">同 <code>@class</code>，标记构造函数。</td><td style="text-align:left;"><code>@constructor</code></td></tr><tr><td style="text-align:left;"><strong><code>@module</code></strong></td><td style="text-align:left;">描述一个 JavaScript 模块。</td><td style="text-align:left;"><code>@module mathUtils</code></td></tr><tr><td style="text-align:left;"><strong><code>@async</code></strong></td><td style="text-align:left;">标识一个函数是异步的（返回 Promise）。</td><td style="text-align:left;"><code>@async</code></td></tr><tr><td style="text-align:left;"><strong><code>@throws</code></strong></td><td style="text-align:left;">描述函数可能抛出的异常。</td><td style="text-align:left;"><code>@throws {SyntaxError} 如果 JSON 字符串格式不正确</code></td></tr><tr><td style="text-align:left;"><strong><code>@deprecated</code></strong></td><td style="text-align:left;">标记一个函数或方法已废弃，不再推荐使用。</td><td style="text-align:left;"><code>@deprecated 请使用 newFunction 代替。</code></td></tr><tr><td style="text-align:left;"><strong><code>@see</code></strong></td><td style="text-align:left;">引用其他相关的文档或代码。</td><td style="text-align:left;"><code>@see {@link OtherClass#method}</code></td></tr><tr><td style="text-align:left;"><strong><code>@todo</code></strong></td><td style="text-align:left;">标记待完成的任务或功能。</td><td style="text-align:left;"><code>@todo 需要添加错误处理逻辑。</code></td></tr></tbody></table><h2 id="生成文档与工具集成" tabindex="-1"><a class="header-anchor" href="#生成文档与工具集成"><span>生成文档与工具集成</span></a></h2><h3 id="_1-安装与生成文档" tabindex="-1"><a class="header-anchor" href="#_1-安装与生成文档"><span>1. 安装与生成文档</span></a></h3><ul><li>安装 JSDoc：<code>npm install -g jsdoc</code></li><li>为基础生成文档：<code>jsdoc yourFile.js</code>（默认会在当前目录生成 <code>out/</code> 文件夹存放文档）</li><li>为整个项目生成文档并使用自定义配置：<code>jsdoc -c jsdoc.json</code></li></ul><h3 id="_2-配置文件-jsdoc-json" tabindex="-1"><a class="header-anchor" href="#_2-配置文件-jsdoc-json"><span>2. 配置文件 (<code>jsdoc.json</code>)</span></a></h3><p>通过配置文件可以更精细地控制文档生成过程，例如指定源文件路径、输出目录、使用插件等。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;source&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;include&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;src&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;exclude&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;src/vendor&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;opts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;destination&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./docs/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;recurse&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;template&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;templates/default&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;plugins&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;plugins/markdown&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsdoc-与-typescript" tabindex="-1"><a class="header-anchor" href="#jsdoc-与-typescript"><span>JSDoc 与 TypeScript</span></a></h2><p>JSDoc 和 TypeScript 并不是互斥的。即使你在使用 TypeScript，JSDoc 注释仍然非常有用：</p><ul><li><strong>补充细节</strong>：JSDoc 的 <code>@description</code>, <code>@example</code>, <code>@deprecated</code> 等标签可以补充 TypeScript 类型语法无法表达的额外信息。</li><li><strong><code>.js</code> 文件中的类型检查</strong>：在纯 JavaScript (<code>.js</code>) 项目中，你可以通过 JSDoc 注释为 TypeScript 编译器提供类型信息，从而在不迁移到</li></ul>`,17)])])}const h=s(l,[["render",n]]),c=JSON.parse('{"path":"/notes/frontnotes/frontbase/JSDoc%E6%B3%A8%E9%87%8A.html","title":"JSDoc 注释详解","lang":"zh-CN","frontmatter":{"date":"2023-04-08T00:00:00.000Z","tag":"前端笔记","headerDepth":2,"icon":"file","description":"记录JSDoc注释相关内容","toc":{"levels":[2,4]},"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JSDoc 注释详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-20T19:57:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"禹穆穆\\"}]}"],["meta",{"property":"og:url","content":"https://bestoaloe.gitee.io/notes/frontnotes/frontbase/JSDoc%E6%B3%A8%E9%87%8A.html"}],["meta",{"property":"og:site_name","content":"禹穆穆"}],["meta",{"property":"og:title","content":"JSDoc 注释详解"}],["meta",{"property":"og:description","content":"记录JSDoc注释相关内容"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-20T19:57:16.000Z"}],["meta",{"property":"article:tag","content":"前端笔记"}],["meta",{"property":"article:published_time","content":"2023-04-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-20T19:57:16.000Z"}]]},"git":{"createdTime":1758043092000,"updatedTime":1758398236000,"contributors":[{"name":"yumuysl","username":"","email":"yinchuanyjw@outlook.com","commits":2}]},"readingTime":{"minutes":2.5,"words":751},"filePathRelative":"notes/frontnotes/frontbase/JSDoc注释.md","excerpt":""}');export{h as comp,c as data};
